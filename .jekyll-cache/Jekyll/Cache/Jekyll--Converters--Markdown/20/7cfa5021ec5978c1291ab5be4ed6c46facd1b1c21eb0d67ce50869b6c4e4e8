I"þ<h3 id="introduction">Introduction:</h3>

<p>This is the 2nd challenge in the in the <a href="https://tourpran.me/categories.html#h-pwn-training">pwn training</a>. In this training we will go through the format string exploitation technique. We are provided 2 challenges of the same vulnerability. Lets go through them one by one.</p>

<h3 id="challenge-1">Challenge 1:</h3>

<p>You can download the binary and the source down below.</p>

<p><a href="/assets/images/pwntraining2/flagleak">vuln binary</a> and 
<a href="/assets/images/pwntraining2/flagleak.c">vuln c code</a></p>

<h3 id="solution">Solution:</h3>

<h4 id="mitigations">Mitigations:</h4>

<p>Lets do the usual drill of checking the mitigations of this binary.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checksec <span class="nt">--file</span> ./flagleak
</code></pre></div></div>
<p><img src="/assets/images/pwntraining2/pwntrain1.png" alt="" /></p>

<p>RELRO:</p>
<ul>
  <li>Partial RELRO - In the attackers point of view, the GOT (Global Offset Table) is readable and writeable.</li>
</ul>

<p>CANARY:</p>
<ul>
  <li>There is no canary so we can do a buffer overflow.</li>
</ul>

<p>No eXecute:</p>
<ul>
  <li>NX Enabled - this makes sure that the code on the stack is not excecuted.</li>
</ul>

<p>PIE:</p>
<ul>
  <li>No PIE: We know the address of the binary at runtime, Since the binary is not position independent.</li>
</ul>

<h4 id="code-walkthrough">Code walkthrough:</h4>

<p>As said in previous training you can dig in deep into the assembly but to make things simpler we are given the source code. (in most CTF / Real life applications itâ€™ll be helpfull if you know assembly).</p>

<p><img src="/assets/images/pwntraining2/pwntrain2.png" alt="" /></p>
:ET