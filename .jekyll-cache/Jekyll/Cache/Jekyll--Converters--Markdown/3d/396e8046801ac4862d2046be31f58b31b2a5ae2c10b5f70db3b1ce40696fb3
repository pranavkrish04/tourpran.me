I"¹	<p><img src="/assets/images/pwntraining3/pwntrain1.png" alt="" /></p>

<h3 id="introduction">Introduction:</h3>

<p>In this blog we will be trying to leak a libc address and try to get a shell by calling system. Here we will look into 2 challenges with similar attacks but slight variations.</p>

<h3 id="challenge">Challenge:</h3>

<p>Here we are given a binary and the source for the binary.</p>

<p><a href="/assets/images/pwntraining3/ret2libc">vuln binary</a> and 
<a href="/assets/images/pwntraining3/ret2libc.c">vuln c code</a></p>

<h3 id="solution">Solution:</h3>

<h4 id="mitigations">Mitigations:</h4>

<p>Before going into the exploitation its better to check what mitigations are enabled for a bianry. Mitigations are protections that were included to avoid certain attacks. For example.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>checksec <span class="nt">--file</span> ./ret2shellcode
</code></pre></div></div>

<p><img src="/assets/images/pwntraining3/pwntrain2.png" alt="" /></p>

<p>If you donâ€™t have checksec installed then</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>checksec
</code></pre></div></div>

<p>RELRO:</p>
<ul>
  <li>Partial RELRO - the got is writeable, nothing much to bother here.</li>
</ul>

<p>CANARY:</p>
<ul>
  <li>No canary, we can do a overflow peacefully :)</li>
</ul>

<p>No eXecute:</p>
<ul>
  <li>NX Enabled - this makes sure that the code on the stack is not excecuted.</li>
</ul>

<p>PIE:</p>
<ul>
  <li>PIE Disabled, we know the address of all the code in the binary.</li>
</ul>

<h4 id="code-walkthrough">Code walkthrough:</h4>

<p>main function:</p>

<p><img src="/assets/images/pwntraining3/pwntrain3.png" alt="" /></p>

<p>Its simple and easy, just overflow the buffer with garbage value and fill the return withâ€¦ withâ€¦ waitâ€¦ with what ? Since there is no win function as such what exactly will we do ? Can we somehow get a shell by leaking something ? Lets look at the idea behind this challenge.</p>

<h4 id="global-offset-table">Global Offset Table:</h4>

<p>This challenge requires you to know the basics of GOT and PLT. In short GOT is a set of address that points to the function in the glibc (shared library). To know more about <a href="https://tourpran.me/blogs/2020/09/13/got-plt.html">Global offset table go ahead to my old blog</a>.</p>

:ET